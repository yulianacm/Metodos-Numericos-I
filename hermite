{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPYd+U9eUzOGmnKap/G8Lai",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yulianacm/Metodos-Numericos-I/blob/main/hermite\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from math import *\n",
        "#Datos de ejemplo\n",
        "x=[1.3, 1.6, 1.9]\n",
        "fx=[0.6200860, 0.4554022, 0.2818186]\n",
        "fx_prima=[-0.5220232, -0.5698959, -0.5811571]\n",
        "x_nueva=1.5"
      ],
      "metadata": {
        "id": "gjiuV6YzPoN0"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GPkovLIQPKub",
        "outputId": "aec530a5-3038-4b5d-9a4d-00689610a506"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Aproximación de f(1.5): 0.5156813600000001\n"
          ]
        }
      ],
      "source": [
        "def hermite(x, fx, fx_prima, x_nueva):\n",
        "    n=len(x)\n",
        "    z=[0]*(2*n)\n",
        "    Q=[[0]*(2*n) for _ in range(2*n)]\n",
        "\n",
        "    for i in range(n):\n",
        "        z[2*i]=x[i]\n",
        "        z[2*i+1]=x[i]\n",
        "        Q[2*i][0]=fx[i]\n",
        "        Q[2*i+1][0]=fx[i]\n",
        "        Q[2*i+1][1]=fx_prima[i]\n",
        "        if i>0:\n",
        "            Q[2*i][1]=(Q[2*i][0]-Q[2*i-1][0])/(z[2*i]-z[2*i-1])\n",
        "\n",
        "    #Calcular diferencias divididas\n",
        "    for i in range(2, 2*n):\n",
        "        for j in range(2, i+1):\n",
        "            Q[i][j]=(Q[i][j-1]-Q[i-1][j-1])/(z[i]-z[i-j])\n",
        "\n",
        "    #Evaluar el polinomio de Hermite para el valor dado\n",
        "    result=Q[0][0]\n",
        "    product=1\n",
        "    for i in range(1, 2*n):\n",
        "        product*=(x_nueva-z[i-1])\n",
        "        result+=Q[i][i]*product\n",
        "        return result\n",
        "\n",
        "#Calcular\n",
        "resultado=hermite(x, fx, fx_prima, x_nueva)\n",
        "print(f\"Aproximación de f({x_nueva}): {resultado}\")\n"
      ]
    }
  ]
}