{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN0a6YQWQOHh/5WPoQUVa0n",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yulianacm/Metodos-Numericos-I/blob/main/Neville\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Método Neville"
      ],
      "metadata": {
        "id": "x-J1XeXVLnDK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Valores dados en el ejemplo\n",
        "x_ej=[1.0, 1.3, 1.6, 1.9, 2.2]\n",
        "f_ej=[0.7651977, 0.6200860, 0.4554022, 0.2818186, 0.1103623]\n",
        "x_interpolar=1.5"
      ],
      "metadata": {
        "id": "MRQRCCvUHdf7"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "kePl6sOMHNYC"
      },
      "outputs": [],
      "source": [
        "def metodo_neville(x_ej, f_ej, x):\n",
        "    n=len(x_ej)\n",
        "    Q=[[0]*n for _ in range(n)]  #Crear una matriz para Q\n",
        "\n",
        "    #Opera para la primera columna de Q\n",
        "    for i in range(n):\n",
        "        Q[i][0]=f_ej[i]\n",
        "\n",
        "    #Obtiene el resto de valores\n",
        "    for i in range(1, n):\n",
        "        for j in range(1, i+1):\n",
        "            Q[i][j]=((x-x_ej[i-j])*Q[i][j-1]-(x-x_ej[i])*Q[i-1][j-1])/(x_ej[i]-x_ej[i-j])\n",
        "\n",
        "    return Q, Q[n-1][n-1] #Regresa todos los valores y P(x)\n",
        "\n",
        "result, valor_interpolado=metodo_neville(x_ej, f_ej, x_interpolar) #Para tener el valor de la interpolación"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Resultados\n",
        "print(\"Resultados\")\n",
        "for fila in result:\n",
        "    print(fila)\n",
        "print(\"Valor de P(\",x_interpolar,\")=\",valor_interpolado)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "haY1kr-pHsPx",
        "outputId": "4f35146a-d704-4b66-9a0b-63572b34b1f8"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Resultados\n",
            "[0.7651977, 0, 0, 0, 0]\n",
            "[0.620086, 0.5233448666666667, 0, 0, 0]\n",
            "[0.4554022, 0.5102968, 0.5124714777777778, 0, 0]\n",
            "[0.2818186, 0.5132634, 0.5112856666666666, 0.5118126938271604, 0]\n",
            "[0.1103623, 0.5104269999999997, 0.5137361333333335, 0.5118302148148148, 0.5118199942386831]\n",
            "Valor de P( 1.5 )= 0.5118199942386831\n"
          ]
        }
      ]
    }
  ]
}